plugins {
    id 'java'
    id "org.checkerframework" version "0.6.33"
    id 'com.diffplug.spotless' version '6.23.3'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

group = 'edu.njit.jerse'
version = '0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.15.2'
    implementation 'com.github.javaparser:javaparser-core:3.23.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'
    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '6.7.0.202309050840-r'
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

test {
    useJUnitPlatform()
}

apply plugin: 'org.checkerframework'
checkerFramework {
    checkers = [
            'org.checkerframework.checker.nullness.NullnessChecker',
            'org.checkerframework.checker.optional.OptionalChecker',
            'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    ]
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        googleJavaFormat().reflowLongStrings()
        formatAnnotations()
    }
}

// TODO: This might contain deprecated code that needs updating.
/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort-directory-order | xargs etags"
}

// TODO: Create a task to run ASHE#main here

// Command to run AsheAutomation#main
// ./gradlew runAsheAutomation -PmodulePath="/path/to/module" -ProotProjectPath="/path/to/root/project"
tasks.register('runAsheAutomation', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('edu.njit.jerse.automation.AsheAutomation')
    args = [
            project.findProperty('modulePath'),
            project.findProperty('rootProjectPath')
    ]
}

// Command to run RepositoryAutomationEngine#main
// ./gradlew runRepositoryAutomation -PrepositoriesCsvPath="/path/to/repositories.csv" -PcloneDirectory="/path/to/clone/directory"
tasks.register('runRepositoryAutomation', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('edu.njit.jerse.automation.RepositoryAutomationEngine')
    args = [
            project.findProperty('repositoriesCsvPath'),
            project.findProperty('cloneDirectory')
    ]
}
